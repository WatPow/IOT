# Architecture d’une solution IoT typique

## Composants d’une solution IoT
Une solution IoT complète ne se limite pas à l’objet connecté lui-même, mais comporte **plusieurs couches** interdépendantes. Typiquement, on retrouve :

- **Objets connectés (périphérie)** – Ce sont les dispositifs physiques équipés de capteurs et/ou d’actionneurs. Ils mesurent des paramètres du monde réel (température, mouvement, position, etc.) ou agissent physiquement (allumer un LED, piloter un moteur…). Chaque objet embarque un microcontrôleur ou un mini-ordinateur qui gère la logique locale et la communication réseau.
- **Passerelles (gateways)** – Dans certains cas, les objets ne se connectent pas directement à Internet. Une passerelle (par ex. un concentrateur local, une box internet, un smartphone) sert de **relai** entre des objets communiquant en local (Bluetooth, Zigbee, etc.) et le réseau étendu (Internet). La passerelle agrège les données de plusieurs capteurs et les transmet au cloud, et inversement route les commandes du cloud vers les objets.
- **Réseau et connectivité** – C’est l’infrastructure de communication reliant les objets au serveur distant. Il peut s’agir de réseaux sans fil (Wi-Fi domestique, réseaux mobiles 3G/4G/5G, réseaux longue portée basse conso comme LoRa ou Sigfox, etc. ou filaires (Ethernet). Parfois, un **réseau maillé local** (Zigbee, Z-Wave, Bluetooth LE…) connecté via une passerelle est utilisé. La connectivité doit être disponible et fiable pour assurer le bon échange de données entre les périphériques et le cloud.
- **Plateforme serveur / cloud (backend)** – Il s’agit de la partie **côté serveur** qui reçoit les données des objets, les stocke, les analyse et permet d’envoyer des commandes en retour. Souvent, c’est un service cloud (par ex. AWS IoT, Azure IoT, ou un serveur MQTT/HTTP hébergé) qui assure le rôle de **cerveau central**. Le backend expose éventuellement des API pour consulter les données ou contrôler les objets. Il peut aussi héberger de l’intelligence (analyses, machine learning) exploitant les données IoT collectées.
- **Application cliente / Interfaces utilisateur** – Enfin, l’utilisateur interagit avec le système via une application. Cela peut être une application mobile, un site web, un tableau de bord ou même un assistant vocal. L’interface utilisateur communique avec le backend (directement ou via une API) pour présenter les informations collectées (mesures, alertes) et permettre à l’utilisateur d’envoyer des commandes aux objets (par ex. bouton dans l’appli pour allumer une lampe connectée).

En résumé, l’objet IoT **n’est jamais « tout seul »** : il fait partie d’un **écosystème** comprenant le réseau et des services distants. Lorsqu’on conçoit l’architecture d’une telle solution, il faut considérer chaque composant et leurs interactions.

## Défis de sécurité associés
La présence de ces multiples couches rend la **sécurité IoT particulièrement complexe**, car une faille à **n’importe quel niveau** peut compromettre l’ensemble. Par exemple : une vulnérabilité sur l’objet (physiquement accessible) peut donner à un attaquant un point d’entrée vers le réseau interne ou les données cloud ; à l’inverse, une faiblesse sur le serveur (ex. API mal protégée) peut permettre à un hacker d’envoyer de fausses commandes aux objets ou d’exfiltrer des données sensibles.

Un des défis majeurs est la **pluridisciplinarité** de l’IoT. Les équipes impliquées ont des compétences diverses : d’un côté les ingénieurs embarqués qui développent l’objet et, de l’autre, les développeurs cloud/serveur. Or, **chacune de ces équipes ignore souvent les contraintes et bonnes pratiques de l’autre domaine**. Par exemple, une équipe IT pourrait méconnaître les limitations hardware (CPU, mémoire, énergie) de l’objet et proposer des solutions inapplicables en pratique. Inversement, une équipe électronique pourrait négliger des mesures de cybersécurité essentielles côté serveur ou réseau. Ce silo peut mener à des erreurs de conception (ex : protocole trop lourd pour l’objet, ou absence de chiffrement car jugé trop complexe sur MCU) qui affaiblissent la sécurité globale.

Il est donc crucial d’adopter une **approche globale de la sécurité**. Cela signifie :
- Impliquer dès le départ des expertises complémentaires (sécurité informatique, développement logiciel, ingénierie système embarqué).
- Veiller à ce que les mécanismes de sécurité couvrent **tous les maillons de la chaîne** : sécurisation de l’objet (physique et logiciel), sécurisation des communications réseau, sécurisation du backend cloud et des données stockées, sécurisation des applications clientes.

On doit également prendre en compte les **spécificités de l’IoT** : les objets ont des ressources limitées, une accessibilité physique par des tiers, et une longue durée de vie, ce qui rend impératif le **maintien des protections dans le temps** (gestion des mises à jour, revocation de clés en cas de compromission, etc.). En bref, la sécurité IoT requiert de la **collaboration interdisciplinaire** et une **vision end-to-end**, faute de quoi des failles peuvent subsister aux interfaces entre les composants.
