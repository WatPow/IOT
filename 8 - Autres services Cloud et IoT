# Autres services Cloud et IoT

Au-delà du prototype sur broker public, le cours a exploré des services cloud IoT plus aboutis, en particulier dans l’écosystème Amazon Web Services (AWS), ainsi que l’intégration des objets connectés avec des **assistants vocaux** comme Alexa ou Google Assistant.

## AWS IoT Core et Device Defender
Le service **AWS IoT Core** d’Amazon a été présenté comme un exemple de plateforme cloud IoT complète. Ce service gère la connectivité sécurisée d’objets à grande échelle. Quelques caractéristiques vues en TP :

- **Gestion des “Things”** : AWS IoT Core permet de créer des objets virtuels (appelés *Things*) représentant nos appareils physiques. Par exemple, on a enregistré notre lampe connectée comme un objet nommé “SmartLamp” dans la console AWS. À chaque objet, on associe un **certificat de sécurité** unique, généré par AWS (ou par une PKI interne). Ce certificat X.509, une fois installé sur l’appareil, servira à authentifier l’appareil auprès du broker AWS via une connexion TLS mutuelle (mTLS).
- **Broker MQTT scalable** : AWS IoT fournit un endpoint MQTT spécifique à l’instance cloud (une URL du style `<identifiant>.iot.<région>.amazonaws.com`). L’appareil (Raspberry Pi) s’y connecte en TLS sur le port 8883 en utilisant son certificat client. Ce broker supporte MQTT 3.1.1 et distribue les messages aux abonnés comme un Mosquitto classique, mais de façon hautement disponible.
- **Politiques de sécurité (IoT Policy)** : Un aspect important est qu’on peut définir des **politiques d’autorisations fines** pour chaque certificat/objet. Par exemple, pour notre SmartLamp, on a créé une policy autorisant l’objet à publier et souscrire sur certains topics spécifiques (et rien d’autre). Ceci répond au principe de moindre privilège – même si l’appareil était compromis, il ne pourrait pas agir en dehors du périmètre qui lui est alloué. Dans le TP, pour simplifier on avait mis une policy permissive (iot:* sur *), mais on a noté qu’en production il faudrait restreindre aux topics de la lampe.
- **Intégration aux services AWS** : AWS IoT Core a aussi une fonction de “Rules” permettant de lier les données IoT à d’autres services AWS (par ex, stocker automatiquement les messages dans DynamoDB, déclencher une fonction Lambda sur certains événements, etc.). On n’a pas détaillé cela dans le résumé, mais c’est un atout pour bâtir des applications serverless autour des objets.

En termes de sécurité, AWS IoT Core illustre une **bonne pratique** : chaque objet a une identité forte (certificat) et les échanges sont chiffrés et authentifiés d’office. **AWS Device Defender** a été présenté comme l’outil complémentaire pour la surveillance de la sécurité IoT dans le cloud AWS. Device Defender permet :

- **L’audit des configurations IoT** : il vérifie que les objets et policies respectent certaines bonnes pratiques (par ex. aucun certificat n’est trop permissif ou expiré, pas de policy “allow *” oubliée, etc.).
- **La détection d’anomalies** : il collecte des **métriques de sécurité** sur les appareils et le broker – par exemple le nombre de messages envoyés habituellement par tel appareil, les tentatives de connexion refusées, etc. ((file://file-Mgr1xvHsLKPWaW3vbJwy9D#:~:text=Name%20SmartLamp_MessageSent)). En apprenant la baseline de comportement, Device Defender peut déclencher des alertes si un appareil envoie soudainement 1000 messages en une minute au lieu de 10 (signe potentiel qu’il a été compromis et spamme) ou si un appareil se connecte depuis un emplacement géographique inattendu.
- **Les alertes et remédiations** : En cas de détection, Device Defender peut créer des alarmes, notifier les administrateurs, voire initier des actions automatiques (comme détacher un certificat compromis).

Dans le TP, après avoir connecté la SmartLamp à AWS IoT, on a pu voir dans la console AWS les métriques de Device Defender liées à cet objet (par ex. le nombre de messages publiés) et comment on pourrait paramétrer des alertes sur des dépassements.

On a également mentionné que d’autres grands acteurs cloud offrent des services similaires : **Google Cloud IoT Core**, **Azure IoT Hub**, **Alibaba IoT** etc., qui tous gèrent l’authentification des devices, la collecte de données, et proposent parfois des fonctionnalités de surveillance de sécurité. Le choix de la plateforme dépendra des affinités et de l’écosystème de l’entreprise, mais tous mettent l’accent sur la sécurisation à grande échelle (certificats, rôles, monitoring…).

## Intégration avec des assistants vocaux (Alexa, Google Assistant)
Le projet de lampe connectée a été poussé plus loin en explorant l’**intégration d’un assistant vocal** pour contrôler la lampe par la voix. En l’occurrence, c’est **Amazon Alexa** qui a été utilisé comme exemple (étant donné l’intégration naturelle avec AWS IoT), mais on a évoqué que des solutions similaires existent pour **Google Assistant**.

Concrètement, l’idée est de permettre à l’utilisateur de dire une commande du type : *« Alexa, allume la lampe du salon »*. L’assistant vocal Alexa va alors interpréter la commande et **déclencher une action sur le cloud** qui aboutira à l’allumage de notre lampe connectée. Deux approches possibles : utiliser un **Alexa Skill** personnalisé ou passer par un service “IoT” d’Alexa.

Dans le TP, on a simplifié en imaginant une Skill Alexa nommée “my PI” pour piloter le Raspberry Pi. L’utilisateur pouvait dire *« Alexa, dis à **my PI** d’allumer la lumière »*. Cette Skill aurait alors appelé une fonction Lambda sur AWS, laquelle publiait un message MQTT vers notre lampe (via AWS IoT Core) pour l’allumer. L’architecture mise en place est la suivante : **Alexa** (cloud Amazon) → **AWS Lambda** (notre code backend) → **AWS IoT Core** (broker MQTT) → **Lampe** (Raspberry Pi). On a pu ainsi **contrôler la LED par la voix**. Les slides montraient l’architecture de cette intégration Alexa-lampe et un cas d’usage où Alexa sert d’interface utilisateur vocale pour l’IoT.

Cette démonstration a souligné la **convergence entre IoT et assistants vocaux**. Les enceintes connectées (Amazon Echo, Google Home) deviennent des **interfaces naturelles** pour piloter les objets de la maison (domotique). En reliant l’IoT aux API de ces assistants, on peut créer des expériences utilisateur fluides. Google Assistant aurait un fonctionnement similaire via la plateforme **Google Home / Google Cloud**. Typiquement, Google propose son service **Google Actions** (équivalent des Alexa Skills) et son cloud IoT, qu’on aurait pu utiliser de la même manière pour envoyer des commandes à la lampe.

Il a toutefois été mentionné en filigrane que cette intégration pose aussi des questions de sécurité : ouvrir un objet à des commandes vocales nécessite de bien authentifier l’émetteur (ici Alexa, via le cloud – ça va, mais attention aux Skills malveillantes) et de gérer les droits (toute personne dans la pièce peut-elle contrôler la lampe ? Quid d’une voix imitée ?). On a cité par exemple des recherches montrant que des **lasers pointés sur un micro d’Amazon Echo ou Google Home peuvent déclencher des commandes** à l’insu de l’utilisateur. Cela dépasse un peu le cadre, mais c’est une illustration des nouveaux vecteurs d’attaque quand on connecte tout ensemble.

En conclusion, l’ouverture aux services cloud et aux assistants vocaux montre comment l’IoT s’insère dans un **écosystème plus large**. Des plateformes comme AWS IoT offrent les briques pour sécuriser et faire évoluer un prototype IoT vers un produit industriel. Les assistants vocaux, quant à eux, offrent des possibilités d’interaction innovantes mais doivent être pris en compte dans l’analyse de sécurité globale (qui aurait pensé qu’une lampe devrait se protéger contre des attaques laser sur un assistant vocal ?). Le cours nous a donc exposés à ces dimensions afin d’avoir une vision d’ensemble des **opportunités** et des **défis** de l’IoT connecté aux services cloud et AI.
